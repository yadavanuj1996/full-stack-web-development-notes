


1) 7 data types
	i)   string
	ii)  boolean
	iii) number
	iv)  null
	v)   undefined
	vi)  object
	vii) symbol (introduced in ES6)
	
	All of above except object are called primitives 

	typeof undefined     === "undefined"; // true
	typeof true          === "boolean";   // true
	typeof 42            === "number";    // true
	typeof "42"          === "string";    // true
	typeof { life: 42 }  === "object";    // true

	// added in ES6!
	typeof Symbol()      === "symbol";    // true	

	A known bug for null
	typeof null === "object" // true


	Array in js is object 
	typeof function a(){/* */} === "function" // true
	but function is also a object it's a subtype of object with a internal [[Call]]	property.

	Array is also object
	typeof [1,2,3] === "object" // true

2) 	In JavaScript, variables don't have types -- values have types. Variables can hold any value, at any time.

3) Undefined vs undeclared
	Many developers will assume "undefined" and "undeclared" are roughly the same thing, but in JavaScript,
	they're quite different.  undefined is a value that a declared variable can hold. "Undeclared" means a
	variable has never been declared.
	```
	var a;

	a; // undefined
	b; // ReferenceError: b is not defined
	
	Ambiguous behaviour
	typeof a  === "undefined" // true
	typeof b === "undefined" // true
	```
	But it's important to understand only those variables that are declared but not initialized will
	print undefined and the variable are even not declared will return Reference error : varName is not defined


							Chapter:2 Values

1) JS array can hold values of multiple different types.
2) Using delete on an array value will remove that slot from the array, but even if you remove the final element, it
 does not update the length property, so be careful! 

	Be careful about creating "sparse" arrays (leaving or creating empty/missing slots):
	```
	var a = [ ];

	a[0] = 1;
	// no `a[1]` slot set here
	a[2] = [ 3 ];

	a[1];		// undefined

	a.length;	// 3

	```
	While that works, it can lead to some confusing behavior with the "empty slots" you leave in between. While
 	the slot appears to have the undefined value in it, it will not behave the same as if the slot is explicitly set
	(a[1] = undefined).

3) 	arrays are numerically indexed (as you'd expect), but the tricky thing is that they also are objects that 
	can have string keys/properties added to them (but which don't count toward the length of the array):
	```
	var a = [ ];

	a[0] = 1;
	a["foobar"] = 2;

	a.length;		// 1
	a["foobar"];	// 2
	a.foobar;		// 2
	```
	However, a gotcha to be aware of is that if a string value intended as a key can be coerced to a standard
	base-10 number, then it is assumed that you wanted to use it as a number index rather than as a string key!
	```
	var a = [ ];

	a["13"] = 42;

	a.length; // 14
	```
	Generally, it's not a great idea to add string keys/properties to arrays. Use objects for holding values 
	in keys/properties, and save arrays for strictly numerically indexed values.

4) Reversing an string (strings are immutable so we have to return new string instead of making changes in itself)
	Another workaround (aka hack) is to convert the string into an array, perform the desired operation, then
	convert it back to a string.
	
	```
	var c = a
		// split `a` into an array of characters
		.split( "" )
		// reverse the array of characters
		.reverse()
		// join the array of characters back to a string
		.join( "" );

	c; // "oof"
	```

	If that feels ugly, it is. Nevertheless, it works for simple strings, so if you need something quick-n-dirty,
	often such an approach gets the job done.

	Warning: Be careful! This approach doesn't work for strings with complex (unicode) characters in them (astral symbols, multibyte characters, etc.). 

5) 	var a = 42.59;

	a.toFixed( 0 ); // "43"
	a.toFixed( 1 ); // "42.6"
	a.toFixed( 2 ); // "42.59"
	a.toFixed( 3 ); // "42.590"
	a.toFixed( 4 ); // "42.5900"

6) Another quirk
	0.1 + 0.2 === 0.3; // false

7) Safe Integer Ranges
	Because of how numbers are represented, there is a range of "safe" values for the whole number 
	"integers", and it's significantly less than Number.MAX_VALUE.

	The maximum integer that can "safely" be represented (that is, there's a guarantee that the requested 
	value is actually representable unambiguously) is 2^53 - 1, which is 9007199254740991. If you insert your
	commas, you'll see that this is just over 9 quadrillion. So that's pretty darn big for numbers to range up to.

	This value is actually automatically predefined in ES6, as Number.MAX_SAFE_INTEGER. Unsurprisingly, 
	there's a minimum value, -9007199254740991, and it's defined in ES6 as Number.MIN_SAFE_INTEGER.

8)	Testing for Integers
	To test if a value is an integer, you can use the ES6-specified Number.isInteger(..):

	Number.isInteger( 42 );		// true
	Number.isInteger( 42.000 );	// true
	Number.isInteger( 42.3 );	// false

	To test if a value is a safe integer, use the ES6-specified Number.isSafeInteger(..):

	Number.isSafeInteger( Number.MAX_SAFE_INTEGER );	// true
	Number.isSafeInteger( Math.pow( 2, 53 ) );			// false
	Number.isSafeInteger( Math.pow( 2, 53 ) - 1 );		// true

	32-bit (Signed) Integers
	While integers can range up to roughly 9 quadrillion safely (53 bits), there are some numeric
	operations (like the bitwise operators) that are only defined for 32-bit numbers, so the "safe
	range" for numbers used in that way must be much smaller.

	The range then is Math.pow(-2,31) (-2147483648, about -2.1 billion) up to Math.pow(2,31)-1 (2147483647, about +2.1 billion).
9) The Non-value Values
	For the undefined type, there is one and only one value: undefined. For the null type, there is one 
	and only one value: null. So for both of them, the label is both its type and its value.

	Both undefined and null are often taken to be interchangeable as either "empty" values or "non" values.
	 Other developers prefer to distinguish between them with nuance. For example:

	null is an empty value
	undefined is a missing value
	Or:

	undefined hasn't had a value yet
	null had a value and doesn't anymore
	Regardless of how you choose to "define" and use these two values, null is a special keyword, not an identifier,
	and thus you cannot treat it as a variable to assign to (why would you!?). However, undefined is (unfortunately) an identifier. Uh oh.

10) NaN (Not a Number)

	NaN literally stands for "not a number", though this label/description is very poor and misleading, as we'll 
	see shortly. It would be much more accurate to think of NaN as being "invalid number," "failed number," or
	even "bad number," than to think of it as "not a number."

	For example:

	var a = 2 / "foo";		// NaN

	typeof a === "number";	// true
	In other words: "the type of not-a-number is 'number'!" Hooray for confusing names and semantics.

	var a = 2 / "foo";

	Number.isNaN( a ); // true

	var a = 1 / 0;	// Infinity
	var b = -1 / 0;	// -Infinity

11) +0 and -0 both exists in js
11) 	function foo(x) {
		x.push( 4 );
		x; // [1,2,3,4]

		// later
		x = [4,5,6];
		x.push( 7 );
		x; // [4,5,6,7]
	}

	var a = [1,2,3];

	foo( a );

	a; // [1,2,3,4]  not  [4,5,6,7]

		
							Chapter-3 Natives

1) Here's a list of the most commonly used natives:

	String()
	Number()
	Boolean()
	Array()
	Object()
	Function()
	RegExp()
	Date()
	Error()
	Symbol() -- added in ES6!
	As you can see, these natives are actually built-in functions.

	If you're coming to JS from a language like Java, JavaScript's String() will look like the String(..) 
	constructor you're used to for creating string values. So, you'll quickly observe that you can do things like:

	var s = new String( "Hello World!" );

	console.log( s.toString() ); // "Hello World!"
	It is true that each of these natives can be used as a native constructor. But what's being constructed
 	may be different than you think.

	var a = new String( "abc" );

	typeof a; // "object" ... not "String"

	a instanceof String; // true

	Object.prototype.toString.call( a ); // "[object String]"
	The result of the constructor form of value creation (new String("abc")) is an object wrapper around the
 	primitive ("abc") value.

	Importantly, typeof shows that these objects are not their own special types, but more appropriately they 
	are subtypes of the object type.


2) 
	Internal [[Class]]
	 
	 Values that are typeof "object" (such as an array) are additionally tagged with an internal [[Class]] property
	 (think of this more as an internal classification rather than related to classes from traditional class-oriented coding).
	 This property cannot be accessed directly, but can generally be revealed indirectly by borrowing the default
	 Object.prototype.toString(..) method called against the value. For example:

	Object.prototype.toString.call( [1,2,3] );			// "[object Array]"

	Object.prototype.toString.call( /regex-literal/i );	// "[object RegExp]"
	Object.prototype.toString.call( [1,2,3] );			// "[object Array]"

3)	Boxing Wrappers
	These object wrappers serve a very important purpose. Primitive values don't have properties or methods,
 	so to access .length or .toString() you need an object wrapper around the value. Thankfully, JS will automatically
 	box (aka wrap) the primitive value to fulfill such accesses.

	var a = "abc";

	a.length; // 3
	a.toUpperCase(); // "ABC"
	So, if you're going to be accessing these properties/methods on your string values regularly, like a i < a.length
 	condition in a for loop for instance, it might seem to make sense to just have the object form of the value from the start,
 	so the JS engine doesn't need to implicitly create it for you.

	But it turns out that's a bad idea. Browsers long ago performance-optimized the common cases like .length, which means
 	your program will actually go slower if you try to "preoptimize" by directly using the object form (which isn't on the optimized path).

	In general, there's basically no reason to use the object form directly. It's better to just let the boxing happen
 	implicitly where necessary. In other words, never do things like new String("abc"), new Number(42), etc -- always prefer
 	using the literal primitive values "abc" and 42.

		Object.prototype.toString.call( /regex-literal/i );	// "[object RegExp]"

2)	Object Wrapper Gotchas
	There are some gotchas with using the object wrappers directly that you should be aware of if you do choose to ever use them.

	For example, consider Boolean wrapped values:

	var a = new Boolean( false );

	if (!a) {
		console.log( "Oops" ); // never runs
	}
	The problem is that you've created an object wrapper around the false value, but objects themselves
	are "truthy" (see Chapter 4), so using the object behaves oppositely to using the underlying false value 
	itself, which is quite contrary to normal expectation. 	
	If you want to manually box a primitive value, you can use the Object(..) function (no new keyword):

	var a = "abc";
	var b = new String( a );
	var c = Object( a );

	typeof a; // "string"
	typeof b; // "object"
	typeof c; // "object"

	b instanceof String; // true
	c instanceof String; // true

	Object.prototype.toString.call( b ); // "[object String]"
	Object.prototype.toString.call( c ); // "[object String]"

3) Unboxing
	If you have an object wrapper and you want to get the underlying primitive value out, you can use the valueOf() method:

	var a = new String( "abc" );
	var b = new Number( 42 );
	var c = new Boolean( true );

	a.valueOf(); // "abc"
	b.valueOf(); // 42
	c.valueOf(); // true
	Unboxing can also happen implicitly, when using an object wrapper value in a way that requires the primitive value. This process (coercion) will be covered in more detail in Chapter 4, but briefly:

	var a = new String( "abc" );
	var b = a + ""; // `b` has the unboxed primitive value "abc"

	typeof a; // "object"
	typeof b; // "string"

4) 	Date(..) and Error(..)
The Date(..) and Error(..) native constructors are much more useful than the other natives, because there is no literal form for either.

To create a date object value, you must use new Date(). The Date(..) constructor accepts optional arguments to specify the date/time to use, but if omitted, the current date/time is assumed.

By far the most common reason you construct a date object is to get the current timestamp value (a signed integer number of milliseconds since Jan 1, 1970). You can do this by calling getTime() on a date object instance.


								Chapter 4 Coercion



1) Converting Values
Converting a value from one type to another is often called "type casting," when done explicitly, and "coercion" when done implicitly (forced by the rules of how a value is used).

Note: It may not be obvious, but JavaScript coercions always result in one of the scalar primitive (see Chapter 2) values, like string, number, or boolean. There is no coercion that results in a complex value like object or function. Chapter 3 covers "boxing," which wraps scalar primitive values in their object counterparts, but this is not really coercion in an accurate sense.
